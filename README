# Project 1: Deterministic Finite Automata

* Author: Benjamin Warner
* Class: CS361 Section 002
* Semester: Fall 2021

## Overview

This program models a Deterministic Finite Automata (DFA).

A command line simulator is provided through DFADriver.java.
This simulator takes a single argument: a plain-text file that provides
the formal definition of a DFA (the 5-tuple) and some strings that
are used to determine if the DFA modeled accepts the strings.

## Compiling and Running

To build the driver, run the below command:

`javac fa/dfa/DFADriver.java`

To run the compiled driver, use the below command format:

`java fa/dfa/DFADriver path/to/input/file.txt`

An input file should consist of the 5-tuple that defines a DFA; this includes:

* the set of final states F
* the start state, q0
* the set of all regular states (non-final and non-start)
* the set of transitions (which will also provide the alphabet)

It should be noted that state names are always a single character. Additionally,
the letter 'e' is used to define the empty string (epsilon).

The first line of the input file defines the final states; each final state is separated
by white space. This line can be empty if there are no final states.

The next line defines the name of the start state.

The third line defines the remaining states of the machine. This line
will not include F or q0 (i.e. any states from the previous two lines). Like
the final states line, each state is separated by white space. This line
may also be empty.

The fourth line defines the transitions from state to state. Each transition is 
separated by white space. A transition consists of three characters: s1, s2, s3.

* s1 is the name of the from state
* s2 is the symbol from the alphabet that defines the edge for the from state to the input state
* s3 is the name of the to state

Line five onwards define strings to determine if they're part of the DFA defined in the first four lines.
Each line consists only of symbols from the machine's alphabet (i.e. strings over Sigma). Each line
defines exactly one string.

### Example Input File

```
b
a
a0a a1b b0a b1b
0
1
00
101
e
```

## Discussion

As far as difficulties go, this program was rather simple and straight forward. Modeling
transitions is not inherently difficult (which was the most complicated part of this program).
I'm unhappy with my implementation of the toString method for the DFA class, mostly because
it just looks messy, but it gets the job done.

I did not particularly care for having a separate class to model a state in the DFA, mostly because
a state is just a label. Modeling the transitions was done using a map, where the key was the from state
name and the character to transition on and the value was the to state. That seemed much more natural than
attempting to implement transitions on a separate state class. 

Also, the method name `getABC` is not particularly good. While I understand it, I think a better name would
be `getAlphabet`, since that is how Sigma is generally referred to in the context of finite automata.

There may be some weird behavior if a test string defines a transition that doesn't exist. Quite possibly,
an exception might actually get thrown. May need to fix that.

## Testing

Sample input files were provided by my instructor (actually, the contents of the example input file provided
in this README is one such input file). Three input files were provided, along with the expected output
of running the program with them. Program correctness was verified by running this implementation
on those input files and comparing output. No additional input files were constructed.
